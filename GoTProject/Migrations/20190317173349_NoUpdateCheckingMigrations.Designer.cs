// <auto-generated />
using System;
using GoTProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoTProject.Migrations
{
    [DbContext(typeof(GoTProjectContext))]
    [Migration("20190317173349_NoUpdateCheckingMigrations")]
    partial class NoUpdateCheckingMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoTProject.Areas.Identity.Data.GoTProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Priority");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GoTProject.Models.Meal", b =>
                {
                    b.Property<int>("MealID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("MealName");

                    b.Property<decimal>("MealPrice");

                    b.HasKey("MealID");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("GoTProject.Models.MealInventory", b =>
                {
                    b.Property<int>("MealInventoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MealID");

                    b.Property<int>("ProductID");

                    b.HasKey("MealInventoryID");

                    b.HasIndex("MealID");

                    b.HasIndex("ProductID");

                    b.ToTable("MealInventory");
                });

            modelBuilder.Entity("GoTProject.Models.MealOrder", b =>
                {
                    b.Property<int>("MealOrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MealID");

                    b.Property<int>("OrderID");

                    b.HasKey("MealOrderID");

                    b.HasIndex("MealID");

                    b.HasIndex("OrderID");

                    b.ToTable("MealOrder");
                });

            modelBuilder.Entity("GoTProject.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Completion");

                    b.Property<string>("ConsumerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<int?>("RecepientTableTableID");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("OrderID");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("RecepientTableTableID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GoTProject.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AmountInLBS");

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InvAdminAcceptorId");

                    b.Property<string>("ProductName");

                    b.Property<int>("SupplierID");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("ProductID");

                    b.HasIndex("InvAdminAcceptorId");

                    b.HasIndex("SupplierID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("GoTProject.Models.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cancelled");

                    b.Property<DateTime>("DateOfReservation");

                    b.Property<string>("PartyName");

                    b.Property<string>("ReserveeId");

                    b.HasKey("ID");

                    b.HasIndex("ReserveeId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("GoTProject.Models.Seat", b =>
                {
                    b.Property<int>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OccupantId");

                    b.Property<int>("TableID");

                    b.Property<int?>("TheReservationID");

                    b.Property<int>("UserID");

                    b.HasKey("SeatID");

                    b.HasIndex("OccupantId");

                    b.HasIndex("TableID");

                    b.HasIndex("TheReservationID");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("GoTProject.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("Phone");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("GoTProject.Models.Table", b =>
                {
                    b.Property<int>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TableColumn");

                    b.Property<int>("TableRow");

                    b.HasKey("TableID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GoTProject.Models.MealInventory", b =>
                {
                    b.HasOne("GoTProject.Models.Meal", "TheMeal")
                        .WithMany("MealInventories")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoTProject.Models.Product", "TheProduct")
                        .WithMany("MealInventories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoTProject.Models.MealOrder", b =>
                {
                    b.HasOne("GoTProject.Models.Meal", "TheMeal")
                        .WithMany("MealOrders")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoTProject.Models.Order", "TheOrder")
                        .WithMany("MealOrders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoTProject.Models.Order", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.HasOne("GoTProject.Models.Table", "RecepientTable")
                        .WithMany()
                        .HasForeignKey("RecepientTableTableID");
                });

            modelBuilder.Entity("GoTProject.Models.Product", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser", "InvAdminAcceptor")
                        .WithMany()
                        .HasForeignKey("InvAdminAcceptorId");

                    b.HasOne("GoTProject.Models.Supplier", "_Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoTProject.Models.Reservation", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser", "Reservee")
                        .WithMany()
                        .HasForeignKey("ReserveeId");
                });

            modelBuilder.Entity("GoTProject.Models.Seat", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser", "Occupant")
                        .WithMany()
                        .HasForeignKey("OccupantId");

                    b.HasOne("GoTProject.Models.Table", "TheTable")
                        .WithMany("Seats")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoTProject.Models.Reservation", "TheReservation")
                        .WithMany("Seats")
                        .HasForeignKey("TheReservationID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoTProject.Areas.Identity.Data.GoTProjectUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
